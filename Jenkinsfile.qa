pipeline {
    agent any

    // tools {
        // nodejs "NodeJS" // Your NodeJS installation name in Jenkins
    // }


    stages {
        stage('Checkout from GitHub') {
            steps {
                git branch: "QA", url: 'https://github.com/lavanyanallabelli/Capstone_team4.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('pos_system-main') {
                     sh 'npm run install:all'
                }
            }
        }

        stage('Build React Application') {
            steps {
                dir('pos_system-main') {
                    sh 'npm run build:client'
                }
            }
        }
        
        stage('Deploy to QA EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'capstone-qa-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                    sh '''
                        echo "Checking if build files exist locally..."
                        ls -la pos_system-main/client/build/
                        echo "Creating remote directory..."
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "mkdir -p /home/ec2-user/qa_pos_system/build"
                        echo "Copying build files..."
                        scp -v -i "$SSH_KEY" -o StrictHostKeyChecking=no -r pos_system-main/client/build/* $SSH_USER@50.17.73.133:/home/ec2-user/qa_pos_system/build/
                        echo "Verifying files were copied..."
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "cd /home/ec2-user/qa_pos_system && ls -la build/"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "pm2 stop qa-pos-system || true"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "cd /home/ec2-user/qa_pos_system && pm2 serve build 3001 --name qa-pos-system --spa"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "pm2 save"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "pm2 startup -u ec2-user --hp /home/ec2-user"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "pm2 list"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "timeout 10 pm2 logs qa-pos-system --lines 20 || echo 'Logs command completed'"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "✅ QA React app build completed successfully!"
            withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                sh """
                curl -X POST -H "Content-type: application/json" --data '{"text": ":white_check_mark: Jenkins QA Build Successful! QA deployment completed."}' $SLACK_URL
                """
            }
        }

        failure {
            echo "❌ QA Build failed!"
            withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                sh """
                curl -X POST -H "Content-type: application/json" --data '{"text": ":x: Jenkins QA Build Failed. Please check the logs."}' $SLACK_URL
                """
            }
        }
    }
}
