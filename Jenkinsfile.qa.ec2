pipeline {
    agent any

    // tools {
        // nodejs "NodeJS" // Your NodeJS installation name in Jenkins
    // }

    parameters {
        choice(
            name: 'BRANCH',
            choices: ['QA', 'main', 'dev'],
            description: 'Select the branch to build'
        )
    }

    stages {
        stage('Workspace Cleanup') {
            steps {
                sh '''
                    echo "Cleaning up workspace..."
                    echo "Removing old build artifacts..."
                    rm -rf pos_system-main/client/build/ || true
                    rm -rf pos_system-main/server/dist/ || true
                    echo "Cleaning up old node_modules..."
                    rm -rf pos_system-main/node_modules/ || true
                    rm -rf pos_system-main/client/node_modules/ || true
                    rm -rf pos_system-main/server/node_modules/ || true
                    echo "Cleaning up package-lock files..."
                    rm -f pos_system-main/package-lock.json || true
                    rm -f pos_system-main/client/package-lock.json || true
                    rm -f pos_system-main/server/package-lock.json || true
                    echo "Workspace cleanup completed!"
                '''
            }
        }

        stage('Checkout from GitHub') {
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/lavanyanallabelli/Capstone_team4.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('pos_system-main') {
                     sh '''
                     echo "Cleaning previous installations..."
                     rm -rf node_modules client/node_modules server/node_modules
                     rm -f package-lock.json client/package-lock.json server/package-lock.json
                     echo "Installing dependencies..."
                     npm run install:all
                     echo "Installing missing dependencies..."
                     cd client && npm install path-exists --save
                     cd ../server && npm install path-exists --save
                     cd ..
                     '''
                }
            }
        }

        stage('Build React Application') {
            steps {
                dir('pos_system-main') {
                    sh 'npm run build:client'
                }
            }
        }
        
        stage('Deploy to QA EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'capstone-qa-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                    sh '''
                        echo "Checking if build files exist locally..."
                        ls -la pos_system-main/client/build/
                        echo "Creating remote directory..."
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "mkdir -p /home/ec2-user/qa_pos_system/build"
                        echo "Copying build files..."
                        scp -v -i "$SSH_KEY" -o StrictHostKeyChecking=no -r pos_system-main/client/build/* $SSH_USER@50.17.73.133:/home/ec2-user/qa_pos_system/build/
                        echo "Verifying files were copied..."
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "cd /home/ec2-user/qa_pos_system && ls -la build/"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "pm2 stop qa-pos-system || true"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "cd /home/ec2-user/qa_pos_system && pm2 serve build 3001 --name qa-pos-system --spa"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "pm2 save"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "pm2 startup -u ec2-user --hp /home/ec2-user || echo 'PM2 startup command completed (may require manual setup)'"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "pm2 list"
                        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -T $SSH_USER@50.17.73.133 "timeout 10 pm2 logs qa-pos-system --lines 20 || echo 'Logs command completed'"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "React app build completed successfully for branch ${params.BRANCH}!"
            withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                sh """
                curl -X POST -H "Content-type: application/json" --data '{"text": ":white_check_mark: Jenkins QA Build Successful! QA deployment completed for branch ${params.BRANCH}."}' $SLACK_URL
                """
            }
            emailext (
                subject: "✅ Jenkins QA Build Successful - Branch: ${params.BRANCH}",
                body: """
                <h2>Build Successful!</h2>
                <p><strong>Project:</strong> POS System</p>
                <p><strong>Branch:</strong> ${params.BRANCH}</p>
                <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                <p><strong>Status:</strong> SUCCESS</p>
                <p><strong>Deployment:</strong> QA EC2 Instance</p>
                <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                <p>The React application has been successfully built and deployed to the QA EC2 instance.</p>
                """,
                to: "${env.CHANGE_AUTHOR_EMAIL ?: 'nikithaveerati01@gmail.com'}",
                mimeType: 'text/html'
            )
        }

        failure {
            echo "Build failed!"
            withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                sh """
                curl -X POST -H "Content-type: application/json" --data '{"text": ":x: Jenkins QA Build Failed for branch ${params.BRANCH}. Please check the logs."}' $SLACK_URL
                """
            }
            emailext (
                subject: "❌ Jenkins QA Build Failed - Branch: ${params.BRANCH}",
                body: """
                <h2>Build Failed!</h2>
                <p><strong>Project:</strong> POS System</p>
                <p><strong>Branch:</strong> ${params.BRANCH}</p>
                <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                <p><strong>Status:</strong> FAILED</p>
                <p><strong>Environment:</strong> QA EC2 Instance</p>
                <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                <p><strong>Console Output:</strong> <a href="${env.BUILD_URL}console">${env.BUILD_URL}console</a></p>
                <p>Please check the build logs for more details about the failure.</p>
                """,
                to: "${env.CHANGE_AUTHOR_EMAIL ?: 'nikithaveerati01@gmail.com'}",
                mimeType: 'text/html'
            )
        }
    }
}
